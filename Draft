# -*- coding: UTF-8 -*-
import numpy as np
from numpy import random
import copy

# 随机生成p(x,y)
p_x_y=np.mat(random.random(size=(4,10)))
sum1=(p_x_y.sum(axis=1)).sum(axis=0)
p_x_y=p_x_y/sum1

# 随机生成P(t|x):
p_tx=np.mat(np.zeros((3,10)))
for i in range(0,10):
    temp = np.mat(random.random((3, 1)))
    p_tx[:,i]=temp/temp.sum(axis=0)



# 计算p(t)
p_x=np.mat(p_x_y.sum(axis=0))
p_t=np.mat(np.zeros((1,3)))
for i in range(0,3):
    p_t[0,i]=np.multiply(p_x[0,:],p_tx[i,:]).sum(axis=1)
# print p_t

# 计算p(y|t)
p_yt=np.mat(np.zeros((4,3)))
for i in range(0,4):
    for j in range(0,3):
        p_yt[i,j]=np.multiply(p_x_y[i,:],p_tx[j,:]).sum(axis=1)/p_t[0,j]
# print p_yt
# 计算p(x)
p_x=p_x_y.sum(axis=0)
# print p_x
# 计算p(y|x)
p_yx=np.mat(np.zeros((4,10)))
for i in range(0,4):
    for j in range(0,10):
        p_yx[i,j]=p_x_y[i,j]/p_x[0,j]
# print p_yx
beta=5
# KL距离计算函数
def D_KL(p1, p2, x1, x2):
    Dkl=np.multiply(p1[:, x1].T, np.log(p1[:, x1].T / p2[:, x2].T)).sum(axis=1)
    return Dkl

def D_JS(p1, p2, x1, x2):
    Djs=0.5*D_KL(p1,0.5*(p1+p2),x1,x2)+0.5*D_KL(p2,0.5*(p1+p2),x1,x2)
    return Djs


# 归一化函数
def norm(x,beta):
    sum=0
    for t in range(0,p_t.size):
        sum+=p_t[0,t]*np.exp(-beta*D_KL(p_yx,p_yt,x,t))
    return sum
# first step
# print "p(t|x):",p_tx
p_tx_f=copy.copy(p_tx)
for x in range(0,10):
    for t in range(0,3):
        p_tx[t,x]=(p_t[0,t]*np.exp(-beta*D_KL(p_yx,p_yt,x,t)))/norm(x,beta)


# second step
for t in range(0,3):
    p_t[0,t]=np.multiply(p_x[0,:],p_tx[t,:]).sum(axis=1)
# print p_t

# third step:

for y in range(0,4):
    for t in range(0,3):
        p_yt[y, t] = np.multiply(p_x_y[y, :], p_tx[t, :]).sum(axis=1) / p_t[0, t]
# print p_yt
print p_tx[:,0],p_tx_f[:,0]
print p_tx[:,1],p_tx_f[:,1]
print D_JS(p_tx,p_tx_f,0,0)
print D_JS(p_tx,p_tx_f,1,1)
print np.ones(5).max()


